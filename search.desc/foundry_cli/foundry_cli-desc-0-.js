searchState.loadedDescShard("foundry_cli", 0, "Conditionally print a message\nPrints a message to <code>stdout</code> and reads a line from stdin …\nUtility functions for reading from <code>stdin</code>.\nA custom context type for Foundry specific error reporting …\nReturns the argument unchanged.\nInstalls the Foundry eyre hook as the global error report …\nCalls <code>U::from(self)</code>.\nA git dependency which will be installed as a submodule\nGit repo prefix regex\nOptional alias of the dependency\nCLI dependency parsing\nGas limit for the transaction.\nGas price for legacy transactions, or max fee per gas for …\nSend a legacy transaction instead of an EIP1559 …\nThe name of the dependency\nNonce for the transaction.\nMax priority fee per gas for EIP1559 transactions.\nOptional tag corresponding to a Git SHA, tag, or branch.\nThe url to the git repository corresponding to the …\nEther to send in the transaction, either specified in wei, …\nCommonly used aliases for solidity repos,\nA git dependency which will be installed as a submodule\nGit repo prefix regex\nOptional alias of the dependency\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the name of the dependency, prioritizing the alias …\nThe name of the dependency\nReturns the URL of the dependency if it exists, or an …\nOptional tag corresponding to a Git SHA, tag, or branch.\nThe url to the git repository corresponding to the …\nReturns the argument unchanged.\nGas limit for the transaction.\nGas price for legacy transactions, or max fee per gas for …\nCalls <code>U::from(self)</code>.\nSend a legacy transaction instead of an EIP1559 …\nNonce for the transaction.\nMax priority fee per gas for EIP1559 transactions.\nEther to send in the transaction, either specified in wei, …\nReads bytes from <code>stdin</code> into a String.\nShort-hand for <code>parse(true)</code>.\nReads bytes from <code>stdin</code> into a String.\nReads bytes from <code>stdin</code>.\nUnwraps the given <code>Option&lt;T&gt;</code> or reads stdin into a String …\nShort-hand for <code>unwrap(value, true)</code>.\nReads stdin into a String and parses it as <code>Vec&lt;T&gt;</code> using …\nUseful extensions to <code>std::process::Command</code>.\nUseful extensions to <code>std::path::Path</code>.\nDeterministic fuzzer seed used for gas snapshots and …\nFilters multiple strings from a given list of possible …\nDisables terminal colours if either:\nReturns error if constructor has arguments.\nReturns the command’s output if execution is successful, …\nReturns the argument unchanged.\nReturns the command’s stdout if execution is successful, …\nReturns true if the given path has no submodules by …\nCalls <code>U::from(self)</code>.\nReturns true if the  <code>Path</code> has a <code>sol</code> extension\nReturns true if the <code>Path</code> ends with <code>.t.sol</code>\nReturns true if the  <code>Path</code> has a <code>yul</code> extension\nReturns the current time as a <code>Duration</code> since the Unix …\nParses a <code>Duration</code> from a &amp;str\nParses an ether value from a string.\nTrue to perform shallow clones\nHelper functions for suggesting alternative values for a …\nReturns error if constructor has arguments.\nFilters multiple strings from a given list of possible …")