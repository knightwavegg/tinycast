searchState.loadedDescShard("cast", 0, "Module containing a contract’s types and functions.\nDecodes abi-encoded hex input or output\nPerforms ABI encoding based off of the function signature. …\nPerforms packed ABI encoding based off of the function …\nDecodes calldata-encoded hex input or output\nPerforms ABI encoding to produce the hexadecimal calldata …\nConcatencates hex strings\nDisassembles hex encoded bytecode into individual / human …\nErrors for this crate\nExtracts function selectors and arguments from bytecode\nEncodes string into bytes32 value\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts fixed point number into specified number of …\nDecodes rlp encoded list with hex data\nConverts UTF-8 text input to hex\nConverts wei into an eth amount\nGets the selector for a given function signature Optimizes …\nPrints the slot number for the specified mapping type and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nKeccak-256 hashes arbitrary data\nPerforms the left shift operation (&lt;&lt;) on a number\nReturns the maximum value of the given integer type\nReturns the maximum value of the given integer type\nConverts ENS names to their namehash representation …\nDecodes checksummed address from bytes32 value\nDecodes string from bytes32 value\nPerforms the right shift operation (&gt;&gt;) on a number\nConverts hex data into text data\nConverts a number of one base to another\nConverts hexdata into bytes32 value\nConverts integers with specified decimals into fixed point …\nConverts a number into int256 hex string with 0x prefix\nEncodes hex data or list of hex data to hexadecimal rlp\nConverts a number into uint256 hex string with 0x prefix\nConverts an eth amount into a specified unit\nConverts an eth amount into wei\nContainer for all the <code>IERC20</code> function calls.\nA <code>IERC20</code> instance.\nAll the selectors of this enum.\nReturns a reference to the address.\nSets the address and returns <code>self</code>.\nCreates a new call builder for the [<code>balanceOf</code>] function.\nFunction with signature <code>balanceOf(address)</code> and selector …\nContainer type for the return parameters of the …\nCreates a new call builder using this contract instance’…\nCreates a new event filter using this contract instance’…\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new wrapper around an on-chain <code>IERC20</code> contract …\nCreates a new wrapper around an on-chain <code>IERC20</code> contract …\nReturns a reference to the provider.\nSets the address.\nClones the provider and returns a new instance with the …\nRepresents a number’s radix or base. Currently it …\nUtility struct for parsing numbers and formatting them …\nFacilitates formatting an integer into a Base.\nReturns the underlying base. Defaults to Decimal.\nThe base to format to.\nTry parsing a number’s base from a string.\nFormats the number into the specified base.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the underlying number is positive or zero.\nWhether the number is positive or zero.\nReturns a copy of the underlying number as an unsigned …\nThe number.\nParses a string slice into a signed integer. If base is …\nParses a string slice into an unsigned integer. If base is …\nReturns the Rust standard prefix for a base\nReturns the Rust standard prefix for the base.\nSets the number’s base to format to.\nFormats self into a base, specifying whether to add the …\nCreates a copy of the number with the provided base.\nAn error thrown when resolving a function via signature …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nArbitrary nested data Item::Array(vec![]); is equivalent …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")